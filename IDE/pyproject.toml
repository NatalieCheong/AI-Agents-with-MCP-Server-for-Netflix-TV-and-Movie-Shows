[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "netflix-mcp-application"
version = "2.0.0"
description = "Netflix Multi-Agent Business Intelligence MCP Server with AI Agents and Content Safety Guardrails"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "netflix", 
    "mcp", 
    "model-context-protocol", 
    "ai-agents", 
    "business-intelligence", 
    "claude-desktop", 
    "content-analysis",
    "guardrails"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    # Core MCP Framework (Standard MCP Protocol)
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    
    # AI and Multi-Agent Systems
    "openai>=1.0.0",
    "anthropic>=0.20.0",
    
    # Data Processing and Analytics
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    
    # Async and Concurrency Support
    "nest-asyncio>=1.5.0",
    
    # Date/Time and Utilities
    "python-dateutil>=2.8.0",
    
    # JSON and Schema Validation
    "jsonschema>=4.0.0",
    "json5>=0.9.0",
    
    # Logging and Monitoring
    "loguru>=0.7.0",
    "structlog>=23.0.0",
    
    # Security and Validation
    "cryptography>=41.0.0",
    "validators>=0.20.0",
    
    # Configuration Management
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "toml>=0.10.0",
]

[project.optional-dependencies]
dev = [
    # Development and Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]
web = [
    # Web Server Support (optional for deployment)
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "httpx>=0.24.0",
]
ml = [
    # Additional AI/ML Libraries
    "scikit-learn>=1.3.0",
    "nltk>=3.8.0",
    "spacy>=3.6.0",
]
all = [
    "netflix-mcp-application[dev,web,ml]"
]

[project.urls]
Homepage = "https://github.com/yourusername/AI-Agents-with-MCP-Server-for-Netflix-TV-and-Movie-Shows"
Documentation = "https://github.com/yourusername/AI-Agents-with-MCP-Server-for-Netflix-TV-and-Movie-Shows#readme"
Repository = "https://github.com/yourusername/AI-Agents-with-MCP-Server-for-Netflix-TV-and-Movie-Shows"
Issues = "https://github.com/yourusername/AI-Agents-with-MCP-Server-for-Netflix-TV-and-Movie-Shows/issues"

[project.scripts]
netflix-mcp = "mcp_application.mcp_application:main"
netflix-mcp-server = "mcp_server.mcp_server:main"
netflix-mcp-client = "mcp_client.mcp_client:main"

[tool.hatch.build.targets.wheel]
packages = ["mcp_server", "mcp_client", "mcp_application", "agents", "guardrail"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["mcp_server", "mcp_client", "mcp_application", "agents", "guardrail"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "openai.*",
    "anthropic.*"
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "test",
    "tests",
]
asyncio_mode = "auto"
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["mcp_server", "mcp_client", "mcp_application", "agents", "guardrail"]
omit = [
    "*/test*",
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
